import pandas as pd
import matplotlib.pyplot as plt
import mplcursors
import os

#uses ggplot in matplotlib to style all charts
def visualize_metrics():
    output_folder = "results"
    if not os.path.exists(output_folder):
        os.makedirs(output_folder)
    
    #set a stylish theme (ggplot in this example)
    plt.style.use('ggplot')

    #load metrics from CSV generated by DeepQLearner, try for written file
    try:
        metrics_file = pd.read_csv("metrics_output.csv")
    except FileNotFoundError:
        print("metrics_output.csv not found. Please ensure the file exists.")
        return

    episodes = metrics_file["Episode"]
    total_reward = metrics_file["TotalReward"]
    epsilon = metrics_file["Epsilon"]
    win_ratio = metrics_file["WinRatio"]
    squares_revealed = metrics_file["SquaresRevealed"]
    totalTime = metrics_file["EpisodeTime"]
    average_per_move = metrics_file["AverageMoveTime"]

    #plot Total Reward over Episodes
    #create our figure and axes, label, enable data hovering, save as png for ref
    graphTRoE, ax1 = plt.subplots(figsize=(10, 6))
    line1, = ax1.plot(episodes, total_reward, label="Total Reward", marker='o')
    ax1.set_xlabel("Episode")
    ax1.set_ylabel("Total Reward")
    ax1.set_title("Total Reward over Episodes")
    ax1.legend()
    ax1.grid(True)
    #add interactive hover cursor
    mplcursors.cursor(line1, hover=True)
    #save figure to file
    graphTRoE.savefig(os.path.join(output_folder, "total_reward.png"))
    plt.show()

    #plot Epsilon Decay over Episodes
    #create our figure and axes, label, enable data hovering, save as png for ref
    graphEDoE, ax2 = plt.subplots(figsize=(10, 6))
    line2, = ax2.plot(episodes, epsilon, label="Epsilon", color="orange", marker='o')
    ax2.set_xlabel("Episode")
    ax2.set_ylabel("Epsilon")
    ax2.set_title("Epsilon Decay over Episodes")
    ax2.legend()
    ax2.grid(True)
    mplcursors.cursor(line2, hover=True)
    graphEDoE.savefig(os.path.join(output_folder, "epsilon_decay.png"))
    plt.show()

    #plot Win Ratio over Episodes
    graphWRoE, ax3 = plt.subplots(figsize=(10, 6))
    line3, = ax3.plot(episodes, win_ratio, label="Win Ratio", color="green", marker='o')
    ax3.set_xlabel("Episode")
    ax3.set_ylabel("Win Ratio")
    ax3.set_title("Win Ratio over Episodes")
    ax3.legend()
    ax3.grid(True)
    mplcursors.cursor(line3, hover=True)
    graphWRoE.savefig(os.path.join(output_folder, "win_ratio.png"))
    plt.show()

    #plot Squares Revealed over Episodes
    graphSRoE, ax4 = plt.subplots(figsize=(10, 6))
    line4, = ax4.plot(episodes, squares_revealed, label="Squares Revealed", color="purple", marker='o')
    ax4.set_xlabel("Episode")
    ax4.set_ylabel("Squares Revealed")
    ax4.set_title("Squares Revealed over Episodes")
    ax4.legend()
    ax4.grid(True)
    mplcursors.cursor(line4, hover=True)
    graphSRoE.savefig(os.path.join(output_folder, "squares_revealed.png"))
    plt.show()
    
    #plot Episode Time over Episodes
    graphET, axET = plt.subplots(figsize=(10, 6))
    lineET, = axET.plot(episodes, totalTime, label="Episode Time", marker='o', color="red")
    axET.set_xlabel("Episode")
    axET.set_ylabel("Episode Time (seconds)")
    axET.set_title("Episode Time over Episodes")
    axET.legend()
    axET.grid(True)
    mplcursors.cursor(lineET, hover=True)
    graphET.savefig(os.path.join(output_folder, "episode_time.png"))
    plt.show()

    #plot Average Time per Move over Episodes
    graphAT, axAT = plt.subplots(figsize=(10, 6))
    lineAT, = axAT.plot(episodes, average_per_move, label="Avg Time per Move", marker='o', color="blue")
    axAT.set_xlabel("Episode")
    axAT.set_ylabel("Average Time per Move (seconds)")
    axAT.set_title("Average Time per Move over Episodes")
    axAT.legend()
    axAT.grid(True)
    mplcursors.cursor(lineAT, hover=True)
    graphAT.savefig(os.path.join(output_folder, "avg_time_per_move.png"))
    plt.show()

    #plot stratified metrics, depending on the file we wish to present
    strat_file = "metrics_stratified_10x10_8mines_2000eps.csv"  
    try:
        strat_f = pd.read_csv(strat_file)
        # Using index as a proxy for stratified intervals.
        interval = range(1, len(strat_f) + 1)
        avg_reward = strat_f["AvgReward"].astype(float)
        avg_win_ratio = strat_f["AvgWinRatio"].astype(float)
        avg_epsilon = strat_f["AvgEpsilon"].astype(float)
        avg_squares = strat_f["AvgSquaresRevealed"].astype(float)

        #plot Average Reward per Stratified Interval
        graphARpSI, ax5 = plt.subplots(figsize=(10, 6))
        line5, = ax5.plot(interval, avg_reward, label="Avg Reward", marker='o')
        ax5.set_xlabel("Stratified Interval")
        ax5.set_ylabel("Average Reward")
        ax5.set_title("Average Reward per Stratified Interval")
        ax5.legend()
        ax5.grid(True)
        mplcursors.cursor(line5, hover=True)
        graphARpSI.savefig(os.path.join(output_folder, "avg_reward_stratified.png"))
        plt.show()

        #plot Average Win Ratio per Stratified Interval
        graphWRpSI, ax6 = plt.subplots(figsize=(10, 6))
        line6, = ax6.plot(interval, avg_win_ratio, label="Avg Win Ratio", marker='o', color="brown")
        ax6.set_xlabel("Stratified Interval")
        ax6.set_ylabel("Average Win Ratio")
        ax6.set_title("Average Win Ratio per Stratified Interval")
        ax6.legend()
        ax6.grid(True)
        mplcursors.cursor(line6, hover=True)
        graphWRpSI.savefig(os.path.join(output_folder, "avg_win_ratio_stratified.png"))
        plt.show()

    except FileNotFoundError:
        print(f"Stratified metrics file '{strat_file}' not found. Skipping stratified visualizations.")

if __name__ == "__main__":
    visualize_metrics()